syntax = "proto3";

package zrchain.validation;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/zrchain/zrchain/x/validation/types";

// Query defines the gRPC querier service.
service Query {
  // Delegation queries validator info for given validator address.
  rpc Delegation(QueryDelegationRequest) returns (QueryDelegationResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}";
  }

  // DelegatorDelegations queries all delegations of a given delegator address.
  rpc DelegatorDelegations(QueryDelegatorDelegationsRequest) returns (QueryDelegatorDelegationsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/delegations/{delegator_addr}";
  }

  // DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
  rpc DelegatorUnbondingDelegations(QueryDelegatorUnbondingDelegationsRequest) returns (QueryDelegatorUnbondingDelegationsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations";
  }

  // DelegatorValidator queries validator info for given delegator validator pair.
  rpc DelegatorValidator(QueryDelegatorValidatorRequest) returns (QueryDelegatorValidatorResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}";
  }

  // DelegatorValidators queries all validators info for given delegator address.
  rpc DelegatorValidators(QueryDelegatorValidatorsRequest) returns (QueryDelegatorValidatorsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators";
  }

  // HistoricalInfo queries the historical info for given height.
  rpc HistoricalInfo(QueryHistoricalInfoRequest) returns (QueryHistoricalInfoResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/historical_info/{height}";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/params";
  }

  // Pool queries the pool info.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/pool";
  }

  // Redelegations queries redelegations of given address.
  rpc Redelegations(QueryRedelegationsRequest) returns (QueryRedelegationsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations";
  }

  // UnbondingDelegation queries unbonding info for given validator delegator pair.
  rpc UnbondingDelegation(QueryUnbondingDelegationRequest) returns (QueryUnbondingDelegationResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation";
  }

  // Validator queries validator info for given validator address.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validators/{validator_addr}";
  }

  // ValidatorDelegations queries delegate info for given validator.
  rpc ValidatorDelegations(QueryValidatorDelegationsRequest) returns (QueryValidatorDelegationsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations";
  }

  // ValidatorPower queries validator power for given validator address.
  rpc ValidatorPower(QueryPowerRequest) returns (QueryPowerResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validator_power";
  }

  // ValidatorUnbondingDelegations queries unbonding delegations of a validator.
  rpc ValidatorUnbondingDelegations(QueryValidatorUnbondingDelegationsRequest) returns (QueryValidatorUnbondingDelegationsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations";
  }

  // Validators queries all validators that match the given status.
  rpc Validators(QueryValidatorsRequest) returns (QueryValidatorsResponse) {
    option (google.api.http).get = "/cosmos/staking/v1beta1/validators";
  }
}

// QueryDelegationRequest is request type for the Query/Delegation RPC method.
message QueryDelegationRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryDelegationResponse is response type for the Query/Delegation RPC method.
message QueryDelegationResponse {
  DelegationResponse delegation_response = 1 [(gogoproto.nullable) = false];
}

// QueryDelegatorDelegationsRequest is request type for the Query/DelegatorDelegations RPC method.
message QueryDelegatorDelegationsRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method.
message QueryDelegatorDelegationsResponse {
  repeated DelegationResponse delegation_responses = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDelegatorUnbondingDelegationsRequest is request type for the Query/DelegatorUnbondingDelegations RPC method.
message QueryDelegatorUnbondingDelegationsRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDelegatorUnbondingDelegationsResponse is response type for the Query/DelegatorUnbondingDelegations RPC method.
message QueryDelegatorUnbondingDelegationsResponse {
  repeated UnbondingDelegation unbonding_responses = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDelegatorValidatorRequest is request type for the Query/DelegatorValidator RPC method.
message QueryDelegatorValidatorRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryDelegatorValidatorResponse is response type for the Query/DelegatorValidator RPC method.
message QueryDelegatorValidatorResponse {
  Validator validator = 1 [(gogoproto.nullable) = false];
}

// QueryDelegatorValidatorsRequest is request type for the Query/DelegatorValidators RPC method.
message QueryDelegatorValidatorsRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method.
message QueryDelegatorValidatorsResponse {
  repeated Validator validators = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC method.
message QueryHistoricalInfoRequest {
  int64 height = 1;
}

// QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method.
message QueryHistoricalInfoResponse {
  HistoricalInfo hist = 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryPoolRequest is request type for the Query/Pool RPC method.
message QueryPoolRequest {}

// QueryPoolResponse is response type for the Query/Pool RPC method.
message QueryPoolResponse {
  Pool pool = 1 [(gogoproto.nullable) = false];
}

// QueryRedelegationsRequest is request type for the Query/Redelegations RPC method.
message QueryRedelegationsRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string src_validator_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string dst_validator_addr = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryRedelegationsResponse is response type for the Query/Redelegations RPC method.
message QueryRedelegationsResponse {
  repeated RedelegationResponse redelegation_responses = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryUnbondingDelegationRequest is request type for the Query/UnbondingDelegation RPC method.
message QueryUnbondingDelegationRequest {
  string delegator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryUnbondingDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
message QueryUnbondingDelegationResponse {
  UnbondingDelegation unbond = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorRequest is request type for the Query/Validator RPC method.
message QueryValidatorRequest {
  string validator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryValidatorResponse is response type for the Query/Validator RPC method.
message QueryValidatorResponse {
  Validator validator = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorDelegationsRequest is request type for the Query/ValidatorDelegations RPC method.
message QueryValidatorDelegationsRequest {
  string validator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryValidatorDelegationsResponse is response type for the Query/ValidatorDelegations RPC method.
message QueryValidatorDelegationsResponse {
  repeated DelegationResponse delegation_responses = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPowerRequest is request type for the Query/ValidatorPower RPC method.
message QueryPowerRequest {
  string validator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryPowerResponse is response type for the Query/ValidatorPower RPC method.
message QueryPowerResponse {
  int64 power = 1;
}

// QueryValidatorUnbondingDelegationsRequest is request type for the Query/ValidatorUnbondingDelegations RPC method.
message QueryValidatorUnbondingDelegationsRequest {
  string validator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method.
message QueryValidatorUnbondingDelegationsResponse {
  repeated UnbondingDelegation unbonding_responses = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryValidatorsRequest is request type for the Query/Validators RPC method.
message QueryValidatorsRequest {
  string status = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryValidatorsResponse is response type for the Query/Validators RPC method.
message QueryValidatorsResponse {
  repeated Validator validators = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Validator defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins.
message Validator {
  string operator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string consensus_pubkey = 2 [(cosmos_proto.scalar) = "cosmos.PubKey"];
  bool jailed = 3;
  int32 status = 4;
  string tokens = 5;
  string delegator_shares = 6;
  Description description = 7 [(gogoproto.nullable) = false];
  int64 unbonding_height = 8;
  google.protobuf.Timestamp unbonding_time = 9 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  Commission commission = 10 [(gogoproto.nullable) = false];
  string min_self_delegation = 11;
}

// Description defines a validator description.
message Description {
  string moniker = 1;
  string identity = 2;
  string website = 3;
  string security_contact = 4;
  string details = 5;
}

// Commission defines commission parameters for a given validator.
message Commission {
  string commission_rates = 1;
  google.protobuf.Timestamp update_time = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
message Delegation {
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string shares = 3;
}

// DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
message DelegationResponse {
  Delegation delegation = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin balance = 2 [(gogoproto.nullable) = false];
}

// UnbondingDelegation stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list.
message UnbondingDelegation {
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated UnbondingDelegationEntry entries = 3 [(gogoproto.nullable) = false];
}

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
message UnbondingDelegationEntry {
  int64 creation_height = 1;
  google.protobuf.Timestamp completion_time = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  string initial_balance = 3;
  string balance = 4;
}

// HistoricalInfo contains the historical information that gets stored at each height.
message HistoricalInfo {
  Header header = 1 [(gogoproto.nullable) = false];
  repeated Validator valset = 2 [(gogoproto.nullable) = false];
}

// Header defines the structure of a block header.
message Header {
  Version version = 1 [(gogoproto.nullable) = false];
  string chain_id = 2;
  int64 height = 3;
  google.protobuf.Timestamp time = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  BlockID last_block_id = 5 [(gogoproto.nullable) = false];
  bytes last_commit_hash = 6;
  bytes data_hash = 7;
  bytes validators_hash = 8;
  bytes next_validators_hash = 9;
  bytes consensus_hash = 10;
  bytes app_hash = 11;
  bytes last_results_hash = 12;
  bytes evidence_hash = 13;
  bytes proposer_address = 14;
}

// Version captures the consensus rules for processing a block in the blockchain.
message Version {
  uint64 block = 1;
  uint64 app = 2;
}

// BlockID defines the unique identifier of a block.
message BlockID {
  bytes hash = 1;
  PartSetHeader part_set_header = 2 [(gogoproto.nullable) = false];
}

// PartSetHeader defines the structure of a block part set header.
message PartSetHeader {
  int32 total = 1;
  bytes hash = 2;
}

// Params defines the parameters for the staking module.
message Params {
  google.protobuf.Duration unbonding_time = 1 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  uint32 max_validators = 2;
  uint32 max_entries = 3;
  uint32 historical_entries = 4;
  string bond_denom = 5;
}

// Pool is used for tracking bonded and not-bonded token supply of the bond denomination.
message Pool {
  string not_bonded_tokens = 1;
  string bonded_tokens = 2;
} 